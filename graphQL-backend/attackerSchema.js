const { gql } = require('apollo-server-express');
const { MongoClient } = require('mongodb');

const MONGODB_URI = 'mongodb://mongodb:27017/vulnapp';
const client = new MongoClient(MONGODB_URI);

client.connect();

// Define the User and Book schemas
const userSchema = gql`
  type User {
    _id: ID!
    name: String!
    email: String!
  }

  type Query {
    getUserById(userId: ID!): User
  }

  type Mutation {
    updateUser(userId: ID!, name: String!, email: String!): User
  }
`;

const bookSchema = gql`
  type Book {
    title: String!
    author: String!
  }

  type Query {
    getBooks: [Book!]!
  }
`;

// Implement the resolvers for User and Book schemas
const userResolvers = {
  Query: {
    getUserById: async (parent, { userId }) => {
      const db = client.db();
      const user = await db.collection('users').findOne({ _id: userId });
      return user;
    },
  },
  Mutation: {
    updateUser: async (parent, { userId, name, email }) => {
      const db = client.db();
      const updatedUser = await db.collection('users').findOneAndUpdate(
        { _id: userId },
        { $set: { "name": name, "email": email } },
        { returnOriginal: false }
      );
      return updatedUser.value;
    },
  },
};

const books = [
  { title: 'The Great Gatsby', author: 'F. Scott Fitzgerald' },
  { title: 'To Kill a Mockingbird', author: 'Harper Lee' },
  { title: '1984', author: 'George Orwell' },
  { title: 'Pride and Prejudice', author: 'Jane Austen' },
  { title: 'Animal Farm', author: 'George Orwell' },
  { title: 'The Catcher in the Rye', author: 'J.D. Salinger' },
  { title: 'Brave New World', author: 'Aldous Huxley' },
  { title: 'One Hundred Years of Solitude', author: 'Gabriel García Márquez' },
  { title: 'The Sound and the Fury', author: 'William Faulkner' },
  { title: 'Heart of Darkness', author: 'Joseph Conrad' }
];

const bookResolvers = {
  Query: {
    getBooks: async (parent, args, context, info) => {
      const db = client.db();
      const booksResponse = await db.collection('books').find({}).toArray();
      return booksResponse;
    },
  },
};


// Combine the schemas and resolvers
const schema = gql`
  ${userSchema}
  ${bookSchema}

  type Query {
    _: Boolean
  }

  type Mutation {
    _: Boolean
  }
`;

const resolvers = {
  ...userResolvers,
  ...bookResolvers,
};

module.exports = { schema, resolvers };