const express = require('express');
const { ApolloServer, gql } = require('apollo-server-express');


const app = express();


const { schema, resolvers } = require("./schemas");

// Middleware to remove __schema and __type fields from the response
function removeIntrospectionFields(req, res, next) {
    res.on('finish', () => {
        const contentType = res.getHeader('Content-Type');
        if (contentType && contentType.startsWith('application/json')) {
            const body = res.locals.apolloServer.graphqlResponse;
            if (body && body.data) {
                delete body.data.__schema;
                delete body.data.__type;
            }
        }
    });
    next();
}

const server = new ApolloServer({
    typeDefs: schema,
    resolvers,
    introspection: false,
    context: ({ req }) => {
        const token = req.headers.authorization || '';
        return { token };
    },
});

async function startApolloServer() {
    // Wait for the server to start
    await server.start();

    // Apply the middleware to the Apollo Server
    server.applyMiddleware({
        app,
        path: '/graphql',
        middleware: [removeIntrospectionFields],
    });
}


const PORT = 3000;

startApolloServer().then(() => {
    // Start the Express server
    app.listen({ port: 3000 }, () => {
        console.log('Server started at http://localhost:3000/graphql');
    });
});
