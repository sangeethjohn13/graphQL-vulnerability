
const { gql } = require('apollo-server-express');
const { fieldExtensionsEstimator, getComplexity } = require('graphql-query-complexity');
const { MongoClient } = require('mongodb');
const jwt = require('jsonwebtoken');

const MONGODB_URI = 'mongodb://mongodb:27017/vulnapp';
const client = new MongoClient(MONGODB_URI);

client.connect();

// Define the User and Book schemas
const userSchema = gql`
  type User {
    _id: ID!
    name: String!
    email: String!
  }

  type Query {
    getUserById(userId: ID!): User
  }

  type Mutation {
    updateUser(userId: ID!, name: String!, email: String!): User
  }
`;

const bookSchema = gql`
  type Book {
    title: String!
    author: String!
  }

  type Query {
    getBooks: [Book!]!
  }
`;

// Implement the resolvers for User and Book schemas
const userResolvers = {
  Query: {
    getUserById: async (parent, { userId }, context) => {
      // Verify JWT token
      const decoded = jwt.verify(context.token, 'secretKey');
      const authenticatedUserId = decoded._id;

      // Check if the authenticated user has permission to access the requested user
      if (authenticatedUserId !== userId) {
        throw new Error('You are not authorized to access this user');
      }

      const db = client.db();
      const user = await db.collection('users').findOne({ _id: userId });
      return user;
    }
  },
  Mutation: {
    updateUser: async (parent, { userId, name, email }, context) => {
      // Verify JWT token
      const decoded = jwt.verify(context.token, 'secretKey');
      const authenticatedUserId = decoded._id;

      // Check if the authenticated user has permission to update the requested user
      if (authenticatedUserId !== userId) {
        throw new Error('You are not authorized to update this user');
      }

      const db = client.db();
      const updatedUser = await db.collection('users').findOneAndUpdate(
        { _id: userId },
        { $set: { "name": name, "email": email } },
        { returnOriginal: false }
      );
      return updatedUser.value;
    }
  }
};

const bookResolvers = {
  Query: {
    getBooks: async (parent, args, context, info) => {
      // Calculate the query complexity
      const complexity = getComplexity({
        schema,
        query: info.operation.selectionSet,
        variables: args,
        estimators: [fieldExtensionsEstimator()],
      });

      // Set maximum query depth to 2 and maximum complexity to 500
      if (info.operation.selectionSet.selections.length > 2 || complexity > 10) {
        throw new Error('Query is too complex or exceeds maximum depth');
      }

      // Throttle requests to 100 requests per hour per client
      if (context.ip === '127.0.0.1') {
        context.rateLimit.consume(1);
      }
      const db = client.db();
      const booksResponse = await db.collection('books').find({}).toArray();
      return booksResponse;
    },
  },
};


// Combine the schemas and resolvers
const schema = gql`
  ${userSchema}
  ${bookSchema}

  type Query {
    _: Boolean
  }

  type Mutation {
    _: Boolean
  }
`;

const resolvers = {
  ...userResolvers,
  ...bookResolvers,
};

module.exports = { schema, resolvers };