import { Component } from "@angular/core";

import { MessageService } from "primeng/api";
import { PrimeNGConfig } from "primeng/api";
import { AppService } from "./app.service";

@Component({
  selector: "app-root",
  templateUrl: "./app.component.html",
  styleUrls: ["./app.component.scss"],
  providers: [MessageService],
})
export class AppComponent {
  selected: string = "Introspection and Information Leakage";
  attackFlags = {
    injection: true,
    introspection: true,
    auth: true,
    DoS: true,
  };
  spinnerFlag: boolean = false;
  responseBody: any = {};

  constructor(
    private messageService: MessageService,
    private primengConfig: PrimeNGConfig,
    private _appService: AppService
  ) {}

  ngOnInit() {
    this.primengConfig.ripple = true;
  }

  onSelect(selected: string) {
    this.selected = selected;
    this.responseBody = {};
  }

  showSuccess() {
    this.messageService.add({
      severity: "success",
      summary: "Success",
      detail: "GraphQL Security Updated !!!",
    });
    switch (this.selected) {
      case "Injection Attacks":
        this.attackFlags.injection = false;
        break;
      case "Introspection and Information Leakage":
        this.attackFlags.introspection = false;
        break;
      case "Authorization and Authentication":
        this.attackFlags.auth = false;
        break;
      case "Schema Design and Denial of Service (DoS) Attacks":
        this.attackFlags.DoS = false;
        break;
      default:
        break;
    }
  }

  showWarn() {
    this.messageService.add({
      severity: "warn",
      summary: "Warn",
      detail: "GraphQL Is Vulnerable !!!",
    });
    switch (this.selected) {
      case "Injection Attacks":
        this.attackFlags.injection = true;
        break;
      case "Introspection and Information Leakage":
        this.attackFlags.introspection = true;
        break;
      case "Authorization and Authentication":
        this.attackFlags.auth = true;
        break;
      case "Schema Design and Denial of Service (DoS) Attacks":
        this.attackFlags.DoS = true;
        break;
      default:
        break;
    }
  }

  showError() {
    this.messageService.add({
      severity: "error",
      summary: "Error",
      detail: "GraphQL Is Under Attack !!!",
    });
    this.responseBody = {};
    switch (this.selected) {
      case "Injection Attacks":
        this.spinnerFlag = true;
        const url1: string = this.attackFlags.injection
          ? "http://localhost:3001"
          : "http://localhost:3000";
        this._appService.getInjectionAttack(url1).subscribe(
          (response) => {
            this.responseBody = response;
            this.spinnerFlag = false;
          },
          (error) => {
            console.log("Something went wrong");
            this.responseBody = error;
            this.spinnerFlag = false;
          }
        );
        break;
      case "Introspection and Information Leakage":
        this.spinnerFlag = true;
        const url2: string = this.attackFlags.introspection
          ? "http://localhost:3001"
          : "http://localhost:3000";
        this._appService.getIntrospectionAttack(url2).subscribe(
          (response) => {
            this.responseBody = response;
            this.spinnerFlag = false;
          },
          (error) => {
            console.log("Something went wrong");
            this.responseBody = error;
            this.spinnerFlag = false;
          }
        );
        break;
      case "Authorization and Authentication":
        this.spinnerFlag = true;
        const url3: string = this.attackFlags.auth
          ? "http://localhost:3001"
          : "http://localhost:3000";
        this._appService.getAuthAttack(url3).subscribe(
          (response) => {
            this.responseBody = response;
            this.spinnerFlag = false;
          },
          (error) => {
            console.log("Something went wrong");
            this.responseBody = error;
            this.spinnerFlag = false;
          }
        );
        break;
      case "Schema Design and Denial of Service (DoS) Attacks":
        this.spinnerFlag = true;
        const url4: string = this.attackFlags.DoS
          ? "http://localhost:3001"
          : "http://localhost:3000";
        this._appService.getDoSAttack(url4).subscribe(
          (response) => {
            this.responseBody = response;
            this.spinnerFlag = false;
          },
          (error) => {
            console.log("Something went wrong");
            this.responseBody = error;
            this.spinnerFlag = false;
          }
        );
        break;
    }
  }
}
